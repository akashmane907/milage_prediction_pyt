# -*- coding: utf-8 -*-
"""Copy of Vehicle Mileage Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mzE_wjiqxyQkJ3l2KKpHlPX7x_YolFzJ

# Predicting mileage of a car in City

By: Nipun Soni

In this file, I will be demonstrating an end-to-end machine learning project on **Automobile dataset**. I have taken data from [UCI Repository](https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data).

I will start from loading data from the repository into pandas dataframe. Then, I will perform basic data cleaning and exploratory data analysis to study the characterstics of dataset. Finally, I will scale the features, split it into test and train datasets and perform a multiple linear regression to predict the mileage of a vehicle in city based on various predictors.

## 1. Load Data

Here, I am loading data directly from UCI repository link. **Data has 26 features and 205 observations.**
"""

# Commented out IPython magic to ensure Python compatibility.
#necessary imports - numpy, pandas, seaborn, matplotlib, sklearn
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from math import sqrt

"""**Data is loaded into pandas dataframe using read_csv function. After loading data into dataframe, I am assigning names to each column and peeking into data using head function.**"""

df_auto_data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data', sep=",", header=None)
df_auto_data.columns = ['symboling','normalized-losses','make','fuel-type','aspiration','num-of-doors','body-style','drive-wheels','engine-location','wheel-base','length','width','height','curb-weight','engine-type','num-of-cylinders','engine-size','fuel-system','bore','stroke','compression-ratio','horsepower','peak-rpm','city-mpg','highway-mpg','price']
df_auto_data.head()

"""Columns **symboling** and **normalized-losses** are not relevant so I am dropping these two columns from the dataframe"""

df_auto_data.drop(['symboling','normalized-losses'], axis=1, inplace=True)
df_auto_data.head()

"""## 2. Getting to know more about data 

We have 24 features in our dataset. In this section, I am trying to know more about these features by using shape, describe and info functions of pandas dataframe.
"""

#getting shape of data
df_auto_data.shape

# Descriptive statistics of numeric columns
df_auto_data.describe()

# information about column datatypes
df_auto_data.info()

"""**The datatype of some of the numeric columns is 'Object' instead of int/ int64/ float. This is addressed in the next section.**

## 3. Data Cleaning

### Why some columns are of type 'Object'?
**While importing data from a source, if the values are inconsistent in a particular feature, pandas will consider it Object by default.**

In automobile dataset, features **horsepower, num-of-doors, bore, stroke** and **price** have junk value ('?') which is why these columns are of type Object.

This can be fixed using **mean imputation technique**. Below are the steps to do so:
1. Substitue 0 in place of '?'
2. Change datatype to int/ float
3. Substitute 0 by mean value of the column

**Note:** Above steps will not work if the column has a value 0 for any observation.

For column **num-of-doors**, I have substituted 'four' instead of '?'. Reason - the two records that have '?' value for num-of-doors column have body-style as sedan. A Sedan generally has four doors.
"""

#Getting unique values of horsepower to check for junk values
df_auto_data.horsepower.unique()

"""**Replacing '?' with mean value of horsepower**"""

#Get index of rows having ?
df_auto_data[df_auto_data['horsepower'] == '?']

#replace ? with 0
df_auto_data.at[130,'horsepower'], df_auto_data.at[131,'horsepower'] = 0, 0
#change datatype to int
df_auto_data.horsepower = df_auto_data.horsepower.astype('int')

#calculate mean of horsepower column
horsepower_mean = df_auto_data.horsepower.mean()
#impute 0 with mean value
df_auto_data.at[130,'horsepower'], df_auto_data.at[131,'horsepower'] = horsepower_mean, horsepower_mean
#descriptive statistics of horsepower column
df_auto_data.horsepower.describe()

#Get unique values of num-of-doors
df_auto_data['num-of-doors'].unique()

#Get index of rows having num-of-doors '?'
df_auto_data[df_auto_data['num-of-doors'] == '?'] #index no. 27, 63

#replace values by 'four'
df_auto_data.at[27,'num-of-doors'], df_auto_data.at[63,'num-of-doors'] = 'four', 'four'

#Get unique values of bore
df_auto_data['bore'].unique()
#Get rows having bore as '?'
df_auto_data[df_auto_data['bore'] == '?']

#Get unique values of bore
df_auto_data['stroke'].unique()
#Get rows having stroke as '?'
df_auto_data[df_auto_data['stroke'] == '?']

#bore and stroke have missing values at same row indexes
#setting values of bore and stroke as 0
df_auto_data.iloc[55:59, 16:18] = 0

#change datatypes of bore and stroke columns to int
df_auto_data.bore = df_auto_data.bore.astype('float')
df_auto_data.stroke = df_auto_data.stroke.astype('float')

#replace bore values by mean
df_auto_data.iloc[55:59, 16] = df_auto_data.bore.mean()

#replace stroke values by mean
df_auto_data.iloc[55:59, 17] = df_auto_data.stroke.mean()

#Get index of rows having price as '?'
df_auto_data[df_auto_data['price'] == '?']

#replace ? with 0 in price columns
#index no. 9, 44, 45, 129
df_auto_data.at[9,'price'], df_auto_data.at[44,'price'], df_auto_data.at[45,'price'], df_auto_data.at[129,'price'] = 0, 0, 0, 0

#change datatype to int64
df_auto_data.price = df_auto_data.price.astype('int64')

#get the mean of price column
mean_price = df_auto_data.price.mean()

#impute 0 in price column by mean
df_auto_data.at[9,'price'], df_auto_data.at[44,'price'], df_auto_data.at[45,'price'], df_auto_data.at[129,'price'] = mean_price, mean_price, mean_price, mean_price

#get descriptive statistics of price column
df_auto_data.price.describe()

"""#### Removing outliers from city-mpg feature"""

#Removing outliers
df_auto_data['city-mpg'].max()
df_auto_data.sort_values(by='city-mpg',ascending=False ).head()

#removing outliers based on city-mpg values
df_auto_data.drop(df_auto_data[df_auto_data['city-mpg'] > 45].index, inplace=True)

"""**Changing datatype of peak-rpm to int64**"""

#get index of rows having peak-rpm = '?'
df_auto_data[df_auto_data['peak-rpm'] == '?'] # index 130, 131

#set value to 0
df_auto_data.at[130,'peak-rpm'], df_auto_data.at[131,'peak-rpm'] = 0, 0

#change datatype to int64
df_auto_data['peak-rpm'] = df_auto_data['peak-rpm'].astype('int64')

#calculate mean
mean_rpm = df_auto_data['peak-rpm'].mean()
#impute with mean
df_auto_data.at[130,'peak-rpm'], df_auto_data.at[131,'peak-rpm'] = mean_rpm, mean_rpm

df_auto_data['peak-rpm'] .unique()

"""**Descriptive statistics after data cleaning**"""

df_auto_data.describe()

#Exploring body-style column (categorical)
df_auto_data['body-style'].value_counts()

"""## 4. Data Exploration

In this section, I have created plots for **exploratory data analysis** of the Automobile data. I am using seaborn package for visualizing the dataset.

Plots used - **Boxplot, Barplot, Countplot, Regplot, Heatmap, Pairplot and Heatmap**

**i. Relation between drive-wheels and highway-mpg**

Box plot is a way to visualize descriptive statistics. Here we can see that fwd vehicles have highest mean highway-mpg in both petrol and diesel categories
"""

sns.boxplot(x='drive-wheels', y='highway-mpg', hue='fuel-type', data=df_auto_data, palette='rainbow')
plt.axhline(df_auto_data['city-mpg'].mean(),color='r',linestyle='dashed',linewidth=2)

"""**ii. Relation between body-style and peak-rpm**

We can see from below plot that vehicles running on gas have higher peak-rpm on an average
"""

sns.barplot(x="body-style", y="peak-rpm", hue="fuel-type", data=df_auto_data)
plt.legend(bbox_to_anchor=(1, 1), loc=2)

"""**iii. Count of car body-style**

Below plot represents count of each category of car. The data has most number of records for sedan.
"""

sns.countplot(x="body-style", data=df_auto_data)

"""**iv. Relation between city-mpg and horsepower**

Regression plot below shows that as the horsepower increases, city-mpg decreases
"""

sns.regplot(x=df_auto_data["horsepower"], y=df_auto_data["city-mpg"], fit_reg=True, color='green')

"""**v. Relation between horsepower and engine-size**

Regression plot below indicates that as the engine-size increases, horsepower increases
"""

sns.regplot(x=df_auto_data["horsepower"], y=df_auto_data["engine-size"], fit_reg=True)

"""**vi. Correlation heat map for features**

Some of the inferences that can be made from below map are:
1. Size of engine and highway-mpg have a high negative correlation
2. Horsepower and engine size have high positive correlation
3. Horsepower and city and highway mpg have high negative correlation
"""

#plot correlation matrix
corr_mat = df_auto_data.corr()
f, ax = plt.subplots(figsize=(12, 9))
sns.heatmap(corr_mat);

"""**vii. Relation between various features using pairplot**

This is a grid of plots for quick exploratory analysis between various factors in a dataset.
"""

#shortlist features for pairplot
pairplot_columns = ['make','fuel-type', 'body-style','drive-wheels','engine-type','num-of-cylinders','engine-size','fuel-system','stroke','peak-rpm','city-mpg','highway-mpg','price']
sns.set()
sns.pairplot(df_auto_data[pairplot_columns], size = 2.0,hue ='fuel-type')
plt.show()

"""**viii. Distribution plot**

The plot gives an idea of distribution of data of a feature. I have created distribution plot for city-mpg. Data looks normally distributed here.
"""

sns.distplot(df_auto_data['city-mpg'])

"""### 5. Feature Scaling

Normalizing values for correct predictions in multiple linear regression model
"""

#make a copy of data
df_auto_data_scaled = df_auto_data.copy()

"""**Creating a function scale_values that will take a value and scale it between 0 and 1**"""

#create function
def scale_values(value):
    return (value-value.min())/(value.max()-value.min())

#scale column values from dataset
df_auto_data_copy['horsepower'] = scale_values(df_auto_data_copy['horsepower'])
df_auto_data_copy['peak-rpm'] = scale_values(df_auto_data_copy['peak-rpm'])
df_auto_data_copy['city-mpg'] = scale_values(df_auto_data_copy['city-mpg'])
df_auto_data_copy['highway-mpg'] = scale_values(df_auto_data_copy['highway-mpg'])
df_auto_data_copy['stroke'] = scale_values(df_auto_data_copy['stroke'])
df_auto_data_copy['engine-size'] = scale_values(df_auto_data_copy['engine-size'])
df_auto_data_copy['length'] = scale_values(df_auto_data_copy['length'])
df_auto_data_copy['width'] = scale_values(df_auto_data_copy['width'])
df_auto_data_copy['height'] = scale_values(df_auto_data_copy['height'])

#peek at scaled data
df_auto_data_copy.head()

"""## 6. Training and Evaluating on the Training Set

I am using a multiple Linear Regression model here to predict city-mpg value based various predictor variables. Predictor variables are **horsepower, peak-rpm, stroke, length and engine-size.**

**Steps:**
1. Extract predictor variables and response variable in two different data frames from scaled dataset
2. Split into test and train datasets
3. Perform linear regression on training dataset
4. Check performance by running model on test dataset
"""

#create a list of predictor variables
factors = ['horsepower', 'peak-rpm', 'stroke', 'length', 'engine-size']

#create dataframes for predictor and response variables using scaled dataset
X = pd.DataFrame(df_auto_data_scaled[factors].copy())
y = df_auto_data_scaled['city-mpg'].copy()

#Split data into train and test and check for data shape
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size = 0.33,random_state=324)
X_train.shape[0] == y_train.shape[0]

#create a linear regression variable
regressor = LinearRegression()

#perform linear regression using train datasets of predictor and response variables
regressor.fit(X_train,y_train)

#store coefficients in a dataframe to check their values
lm_coeff = pd.DataFrame(regressor.coef_,X.columns,columns=['Coefficient'])
lm_coeff

"""#### Running model on test data"""

y_predicted = regressor.predict(X_test)

#store result in dataframe and compare
df_results = pd.DataFrame({'Actual Mileage':y_test,'Predicted Mileage':y_predicted})
df_results

"""### Model Evaluation using RMSE

Let's evaluate model using Root Mean Square Error
"""

rmse = sqrt(mean_squared_error(y_true=y_test,y_pred=y_predicted))
rmse

"""#### City mileage ranges somewhere between 13 to 45 mpg. So, prediction error of 3.12 miles per gallon is good for start.

### Next Steps

We can funther fine tune the model using various techniques or try different models on this dataset to further decrease RMSE.

**Thank You!**
"""